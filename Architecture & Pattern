
- 1. MVC (모델, 뷰, 컨트롤러)
  - 뷰 : 화면에 보이는 요소? 담당
  - 모델 : 데이터 담당
  - 컨트롤 : 그 외 나머지 모든일(인풋, 처리, 화면에 뿌리는 역할 등등) 
    - 컨트롤러의 역할이 너무 막대함, 그래서 나온게 MVP

- 2. MVP(모델, 뷰, 프레젠터)
  - 모델 : 앞과 동일
  - 뷰 : 앞과 동일(인풋)
  - 프레젠터 : 화면에 어떤 내용이 보여질지만 담당
    - 뷰 컨트롤러를 뷰가 갖고 있게 됨, 뷰와 뷰컨트롤러를 모두 뷰로 묶음
  - 인풋이 들어오면 프레젠터에 알려줌, 프레젠터가 로직을 처리함, 
  - 프레젠터 : 뷰가 뭘 보여줘야 되는지 내가 결정할게
  - 뷰와 프레젠터는 1대1의 관계, 프레젠터를 매번 만들어야 하는게 귀찮아짐, 그래서 나온게 MVVM

- 3. MVVM(뷰, 뷰모델, 모델)
  - 뷰 : 앞과 동일?(인풋)
  - 뷰모델 : 화면 그리는거에 신경 안쓸꺼야, 화면에 보여지는 데이터 요소만 갖고 있을거야
  - 모델 : 항상 동일;
    - 뷰모델은 모델하고만 놈, 모델에서 데이터 빼와서 적절히 가공함
  - 뷰는 뷰모델만 구독함, 뷰모델은 뷰한테 간섭하지 않음
  - 뷰모델과 뷰는 1대 다 대응


- MVVM 총정리
  - 뷰 : 화면
  - 모델 : 화면에 그려지기 위한 데이터
  - 모델은 여러가지 형태로 변형을 해서 씀, 서버에서 내려올땐 제이슨,
  - 서버에서 막 가져온 모델은 Entity,
  -   - 그 중에서 의미있는 데이터만 뽑아서 만든 클래스는 모델,
  - 화면에 보여지게 만들기 위해 가공한것은 뷰모델

  - Entity를 Fetch(가져오다)하는 것은 Repository,
  - Entity를 모델로 만드는건 Mapper
  - 모델을 가지고 어떤 Logic을 실행해서 View모델로 만든 뒤,
  - 뷰가 뷰모델을 참조해서 화면에 나타냄


- View는 Service를 사용, Service는 Repository를 사용
  - 1. 뷰는 뷰모델을 이용해서 뷰를 그림
  - 2. 뷰모델은 서비스에 의존해서 모델을 가져옴
  - 3. 모델은 레포에서 얻어온 Entity로 만듬

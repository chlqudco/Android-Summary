- 그래서 어떻게 쓰는건데?
	
1. 일단 의존성 추가 해
implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.0'
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.0'

2. 코루틴은 GlobalScope.launch{  } or CoroutineScope(Dispatchers.IO).launch{} 로 감싸 줘야 해
	- 아니면 CoroutineScope 상속받고 coroutineContext 오버라이드 한 뒤 launch(coroutineContext) {  } ?
	- 그 안에서 withContext(Dispatchers.IO){ }??
	- 뷰모델안에선 viewmodelScope
	
3. 구현
	- 1. scope 변수 선언
	- private val coroutineScope = CoroutineScope(Dispatchers.Main)

	- 2. 코루틴으로 뭐 하고 싶으면 coroutineScope.launch{  } 안에 코드 쓰기

- launch는 Job을 리턴함
- async는 Deferred<T> 를 리턴함
	- async는 맨 뒤에 .await()를 호출해야 함

- 코루틴 안에서 함수 실행할거면 suspend 키워드 넣어야 함

- IO 쓰레드에서 돌리려면 GlobalScope.launch(Dispatchers.IO){  }

- withContext() 는 async랑 역할이 똑같음. 근데 await호출 안해도 됨
	- 실행하는 디스패처 바꿀 때 씀

- GlobalScope는 범위?가 너무 넓음. 액티비티의 생명주기와 일치하는 스코프를 만들고 싶다면
class MainActivity : AppCompatActivity(), CoroutineScope {    // 1
    private lateinit var job: Job     // 2
    override val coroutineContext: CoroutineContext   // 3
        get() = Dispatchers.Main + job
}
- onCreate에서 job = Job()으로 할당해주고 onDestroy에서 job.cancle 하기
- 이렇게 구현하면 바로 launch{} 써도 됨

- 글로벌스코프 vs 코루틴 스코프
	- 앱의 시작부터 종료 때까지 처럼 장기간 실행되는 코루틴은 글로벌 스코프
	- 버튼 클릭으로 서버 정보 가져오는 등의 필요할 때 잠깐 하는건 코루틴 스코프
	- 코루틴스코프는 괄호 안에 디스패처를 써야 함

- 디스패쳐
	- 코루틴이 실행될 쓰레드를 정하기 위해 쓰는 거
	- IO, Main 만 일단 알아라. Main은 UI 작업

- join은 순차 실행이 중요할 때만 사용

- 디스패처 바꾸고 싶으면 withContext(디스패처){ }


- 모든 코루틴은 scope 내에서 실행되어야 한다.
	- 글로벌은 걍 안쓴다고 봐도 됨
	- 코루틴스코프랑 뷰모델스코프를 잘 사용해보자

- 레트로핏 함수는 suspend로 하기
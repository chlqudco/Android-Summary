
- 테스트는 왜 필요할까?
    - 애플리케이션이 기대한 대로 잘 동작한다는 걸 증명하기 위해
    - (중요)버그를 조기에 잡아내는 것이 가능하다
    - (중요)리팩토링과 코드 수정 할 때 올바로 하고 있다는 확신을 받을 수 있다
    - 구현한 코드의 품질이 향상된다
    - 테스트 자체로 코드의 문서화가 가능하다

- 테스트 지원 라이브러리
    - JUnit4, JUnit5
        -  
    - Espresso
    - Mockito
        - 자바에서 단위 테스트를 하기 위해 Mock을 만들어주는 프레임워크
        - Mock이 필요한 테스트에 직관적으로 사용할 수 있도록 만들어짐
        - 구현 기능에 대한 동작 여부 및 예외에 대한 검증 가능
    - PowerMock
        - EasyMock과 같은 다른 Mock 라이브러리를 보다 강력한 기능으로 확장하는 테스트 프레임워크
        - static, 생성자, final 클래스 등에 대한 사용자 조작을 가능케 함
    - Robolectric
        - 안드로이드 앱의 개발을 테스트 할 수 있는 단위 테스트 프레임워크
        - 에뮬레이터나 특별한 장치 없이 JVM에서 테스트를 가능하게 해줌

- 왜 테스트를 먼저 해야 하나?
    - 버그는 조기에 발견할수록 수정 비용이 적게 듬
    - 기획, 설계, 구현, 테스트, 배포 순으로 수정 비용이 커짐
    - TDD가 아닌 구현을 먼저하면 나중에 테스트를 만들 때 테스트가 통과 되도록 테스트를 만드는 경향이 생길 수 있다.
    - 결함을 빨리 발견해야 집에 일찍 간다. 

- 테스트 사이즈 (작은 것 부터)
    - Unit Test(단위 테스트)
    - Integration Test(통합 테스트)
    - Functional Test(기능 테스트)
    - Stress/Load Test(스트레스/ 부하 테스트)
    - Acceptance Test(인수 테스트)


- 테스트 코드를 사용하는 이유
    - 변화에 대한 두려움을 줄여준다. (리팩토링이 편하다)
    - 디버깅 시간을 줄여준다.
    - 동작하는 문서 역할을 한다.

- TDD의 장점
    - TDD를 하면 자연스럽게 테스트 커버리지가 높아진다.
    - 필요한 만큼 코딩하게 되니 오버엔지니어링을 방지한다.
    - 설계에 대한 피드백을 빨리 할 수 있다.

- 단위 테스트
    - 가장 작은 단위의 테스트
    - 일반적으로 메소드 레벨의 테스트
    - 검증이 필요한 코드에 대해 테스트 케이스를 작성하는 절차

- 단위 테스트 목적
    - 1. 문제점 발견.
        - 각 단위가 정확하게 동작하는지 검사하고, 문제가 발생 시 어느 부분이 잘못되었는지 재빨리 확인할 수 있음. 안정성이 높아짐
    - 2. 변경이 쉬워짐
        - 코드 수정이 쉽고, 수정된 코드가 정확하게 동작하는지 쉽게 알 수 있게 된다.
    - 3. 품질 향상
        - 하나의 단위 테스트가 너무 길거나 복잡해 지는 것은 프로덕션 코드가 잘못되었음을 인지한다. 하나의 테스트 메서드에서 너무 많은 기능을 수행하기 때문에 리팩토링이 필요하다는 걸 암시한다.
    - 4. 코드의 문서화
        - 예외 상황, 용도, 의존 관계를 한눈에 파악할 수 있습니다. 

- 좋은 단위 테스트를 만들기 위한 FIRST 법칙
	- Fast : 테스트는 빨라야 함. 느리면 자주 테스트 하지 못함
	- Independent : 테스트는 서로 의존하면 안됨. 의존적이라면 하나가 실패하면 잇따라 실패할 수 있음
	- Repeatable : 어떤 환경에서도 반복 가능해야 함.
	- Self-Validationg : Boolean값으로 검증을 해야 한다. 판단은 객관적으로 해야 한다.
	- Timely : 테스트는 늦어지면 안된다. 실제 코드 작성 직전에 단위 테스트를 작성해야 한다.

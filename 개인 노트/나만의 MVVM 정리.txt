- 자.. 시작 해 보자.. 

1. 패키지 부터 만들기
	- data, domain, presentation

2. presentation 패키지 부터 작업 해보자
	- Base액티비티, 뷰모델, 프래그먼트를 만들자

------------------------------------------------------------------------------------------------------------------

internal abstract class BaseActivity<VM: BaseViewModel, VB: ViewBinding>: AppCompatActivity() {
    abstract val viewModel: VM
    protected lateinit var binding: VB
    abstract fun getViewBinding(): VB
    private lateinit var fetchJob: Job
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = getViewBinding()
        setContentView(binding.root)
        fetchJob = viewModel.fetchData()
        observeData()
    }
    abstract fun observeData()
    override fun onDestroy() {
        if (fetchJob.isActive) {
            fetchJob.cancel()
        }
        super.onDestroy()
    }
}

------------------------------------------------------------------------------------------------------------------

internal abstract class BaseFragment<VM: BaseViewModel, VB: ViewBinding>: Fragment() {
    abstract val viewModel: VM
    protected lateinit var binding: VB
    abstract fun getViewBinding(): VB
    private lateinit var fetchJob: Job
    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
        binding = getViewBinding()
        return binding.root
    }
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        fetchJob = viewModel.fetchData()
        observeData()
    }
    abstract fun observeData()
    override fun onDestroyView() {
        super.onDestroyView()
        if (fetchJob.isActive) {
            fetchJob.cancel()
        }
    }
}

------------------------------------------------------------------------------------------------------------------

internal abstract class BaseViewModel: ViewModel() {
    abstract fun fetchData(): Job
}

------------------------------------------------------------------------------------------------------------------

3. 필요한 만큼 각 화면에 따른 패키지를 만들자
	- 각 패키지 안에는 뷰모델은 필수. 액티비티나 프래그먼트 둘중 선택


4. 그 다음 data 레이어 작업
	- 엄청나게 많은 패키지가 있다
	- 필수 패키지 : entity
		- 뭔지 알잖아 엔티티
		- @Entity data class ProductEntity( )
	- 레트로핏 쓸 거면 network 패키지 만들기
		- 사용할 Url 모아둔 오브젝트 생성
		- object Url { const val PRODUCT_BASE_URL = "https://" }
		- @GET @POST 이런거 모아두는 인터페이스 생성하기
		- interface ProductApiService {
    			@GET("products")
    			suspend fun getProducts(): Response<ProductsResponse>
    			@GET("products/{productId}")
    			suspend fun getProduct(@Path("productId") productId: Long): Response<ProductResponse>
		}
		- retrofit 제공하는 파일 생성
		- internal fun provideProductApiService(retrofit: Retrofit): ProductApiService { return retrofit.create(ProductApiService::class.java) }
		internal fun provideProductRetrofit(
 		   okHttpClient: OkHttpClient,
 		   gsonConverterFactory: GsonConverterFactory,
		): Retrofit {
  			  return Retrofit.Builder()
    			    .baseUrl(Url.PRODUCT_BASE_URL)
    			    .addConverterFactory(gsonConverterFactory)
      			  .build()
		}
	- repository 패키지 만들기
		- 원래는 기능마다 여러 레포 만드는거 같은데 그딴건 모르겠고 다 집어 넣어
		- interface ProductRepository {
    			suspend fun getProductList(): List<ProductEntity>
   		 	suspend fun getLocalProductList(): List<ProductEntity> }
		- 위의 인터페이스를 구현하는 레포Impl 클래스 만들기
			- 싹 다 구현해야 되니까 인자로 받을 수 있는거 다 박아. network 패키지의 ApiService와 코루틴 써야하니 디스패처
			-     override suspend fun getAllMovies(): List<Movie> = withContext(dispatchers) {
        				movieApi.getAllMovies()
    				}
	- api 작업이니 당연히 response 패키지 만들기
		- 뻔하디 뻔한 데이터 클래스이다.
		- 하지만 entity로 변환해줘야 하니 Mapper를 만들던, 클래스 안에 toEntity를 만들던 알아서 해라

5. 그 다음 domain 레이어 작업
	- domain 레이어는 유스케이스 들을 작업 해줄 거예요
	- 유스케이스는 db나 레트로핏을 이용한 작업을 하는 함수를 각각 따로 작성할 거예요
	- 따라서 유스케이스 클래스의 인자로 레포지토리를 받아와야 해요
	- 일단 빈 유스케이스 껍데기부터 만들어요
	- interface UseCase { }
	- 그리고 하고 싶은 작업의 클래스를 만들어용
internal class GetProductListUseCase(
    private val productRepository: ProductRepository
): UseCase {
    suspend operator fun invoke(): List<ProductEntity> {
        return productRepository.getProductList()
    }
}
	- 엄청 단순해서 이럴꺼면 왜 굳이 domain 레이어를 나누는지 모르겠음




---------------------------------------------------------

리사이클러뷰 adapter 도 presentation 패키지에 만들기

State 값을 이용하면 좋은데 어떻게 하는지 아직 잘 모름


















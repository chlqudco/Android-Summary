- GIF 표시하기
	- ImageView는 크기가 큰 그림파일이나 움직이는 GIF는 사용불가능
	- glide라는 외부 라이브러리를 쓰면 해결됨
	- 이때 그림파일은 raw 폴더에 넣어주면 됨
	
- 사용법
	- glide 라이브러리 추가
		- implementation 'com.github.bumptech.glide:glide:4.9.0'
	- 넣기
		- Glide.with(this).load(R.raw.filename).into(ImageView)

===========================================================

- 앱 빌드 속도 빠르게 하기
	- https://cliearl.github.io/posts/android/fast-build/

- 빌드 속도를 최적화 하는 여러 방법들은 구글이 제공하니까 읽어봐
	- https://developer.android.com/studio/build/optimize-your-build

- 최신버전의 Gradle을 사용하라
	- 최신버전일수록 빌드를 빠르게 하는 기술이 적용됨
	- 프로젝트 수준의 그래들 파일의 버전을 확인하라

- 개발시 서로 다른 빌드세팅을 사용하라
	- 디버그를 할 때 릴리즈를 위한 구성중에서 필요없는 설정을 제외하기 위해 buildTypes 블럭을 이용하자
	- debug 블럭과 release블럭을 나누자
	- 모듈수준의 그래들에서 확인할 수 있다

- multidex를 사용하지 않기
	- 단일 DEX(Dalvik Excutable)에서 사용가능한 함수의 최대개수는 65536개
	- 이걸 넘어서면 Multidex를 도입해야 하는데 API 21 미만에서는 느린 Dalvik 런타임을 사용함
	- 그러나 API 21이상에선 ART 런타임을 이용하므로 속도가 빨라짐
	- 즉 최소 Sdk버젼을 21 이상으로 하자

- 복수의 apk 생성 기능을 비활성화 하자
	- APK 파일이 크면 abi나 화면 해상도 별로 apk 파일을 나누어 앱 용량을 줄일 수 있다
	- 그러나 빌드 시간이 기므로 테스트시에는 이 설정을 비활성화 하자
	- buildTypes 안의 debug 블럭에 splits.abi.enable = false, splits.density.enable = false 로 주면 된다

- 패키징 리소스를 최소화 하자
	- 개발할 때는 특정 해상도의 폰만을 사용하므로 다른 모든 해상도의 리소스를 포함시킬 필요가 없다
	- 또한 언어도 한국어만 쓰도록 설정할 수 있다

```

defaultConfig{
    applicationVariants.all { variant ->
        if (variant.buildType.name == "debug") {
            variant.mergedFlavor.resourceConfiguration.clear()
            variant.mergedFlavor.resourceConfiguration.add("ko")
        }
    }
}

```

---

- PNG 크런칭 비활성화 하기
	- 안드로이드에서 PNG를 압축하는 기능을 끄면 빌드 속도가 빠라진다
	- debug에선 기본적으로 사용중지. release 에서도 중지하고 싶으면 설정한다

```

buildTypes{
    release {
        crunchPngs false
    }
}

```

---

- 필요없는 매니페스트 파일 변경하지 않기
	- 앱이 처음 실행될 때 매니페스트에 변경이 있으면 빌드가 처음부터 다시 이뤄짐

- 오류리포팅 기능 사용 안하기
	- 안드로이드는 크래시리스틱 보고서를 자동으로 작성하므로 비활성화 해주자
	- debug{ ext.enableCrashlytics false }

- 라이브러리 버전 잘 설정하기
	- 라이브러리의 버전을 x.x+로 설정하면 x.x대의 최신버전을 사용하라는 뜻임
	- 이 경우에 24시간마다 최신버전을 확인하기 때문에 빌드시간이 증가함
	- 정확한 버전을 명시하자

==============================================================


- 스플래쉬 스크린 설정하기

- 앱이 구동되어 메인화면을 보여주기 전까지 보여주는 화면

- 스크린에 표시할 이미지 고르기
	- 이미지는 해상도 별로 모아야 함.
	- 직접 할 필요 없이 TiCons를 이용하면 편함
	- 나인패치 설정하기 : 뒤에 9 붙었는지 확인
	- 압축 풀고 리소스 폴더 안에 복사하기

- 이미지를 표시할 액티비티 만들기
	- 화면만 보여주고 바로 메인으로 갈거임
	- 스플래시 테마를 이용하면 편함
	- 드로어블 안에 스플래시 xml 만들기
	- 테마 파일 안에 스타일 하나 새로 만들기
	- 굳이 드로어블에 넣을 이유가 없는것 같은데?

- 스플래시 액티비티 만들기
	- 온크리에이트 안에서 인텐트로 메인액티비티로 가기

- 스플래시 액티비티로 매니페스트 바꾸기


====================================================================


- Admob으로 배너광고 표시하기

- 애드몹 라이브러리 추가하기
	- implementation 'com.google.android.gms:play-services-ads:19.7.0'

- 매니페스트에 애드몹 ID를 추가해줘야 함
	- 구글 애드몹 사이트에서 가입을 한 뒤 앱을 등록해야 함
	- 그럼 각 앱마다 고유의 앱 ID를 부여해줌
	- mata-data 태그 안에 name과 value를 넣어주기

```

<meta-data
	android:name="com.google.android.gms.ads.APPLICATION_ID"
	android:value="ca-app-pub-3940256099942544~3347511713" />

```

- 모든 테스트 값은 AdMob 도큐먼트에 나와 있음

- xml 파일에서 애드몹을 표시할 AdView를 추가하자
	- adSize 속성으로 어떤 광고인지, adUnitId로 ID값 넣기
	- 배너 크기 상수값은 공식 문서 확인
	- adUnitId도 애드몹 가입한 뒤 배너광고 ID 가져오기

- 코틀린으로 배너 광고를 불러오자
	- 생명주기 처리 해주는 것도 잊지 말자
	- 테스트 기기 등록하는거 절대 잊지 말자. 정지당한다

```

private fun showBannerAd() {
    // 애드몹 초기화
    MobileAds.initialize(this) {}

    // 테스트용 기기를 등록하여 광고 카운팅을 제외하도록 처리, 이해 안가니까 더 검색해보기
    val testDeviceIds = listOf("My device ID1", "My Device ID2")
    MobileAds.setRequestConfiguration(
        RequestConfiguration.Builder()
            .setTestDeviceIds(testDeviceIds)
            .build()
    )

    mAdView = binding.adView
    // 인터넷에서 광고를 불러옴
    val bannerAdRequest = AdRequest.Builder().build()
    // 광고를 배너에 표시
    mAdView.loadAd(bannerAdRequest)
    mAdView.adListener = object : AdListener() {
        // 광고 로딩이 성공했을때 처리
        override fun onAdLoaded() {
            Toast.makeText(applicationContext, "Banner Ad loaded", Toast.LENGTH_SHORT).show()
        }

        // 광고 로딩이 실패했을때 처리
        override fun onAdFailedToLoad(p0: LoadAdError?) {
            Toast.makeText(applicationContext, "Banner Ad loading failed", Toast.LENGTH_SHORT).show()
        }
    }
}

override fun onPause() {
    mAdView.pause()
    super.onPause()
}

override fun onResume() {
    super.onResume()
    mAdView.resume()
}

override fun onDestroy() {
    mAdView.destroy()
    super.onDestroy()
}


```

################################################################################################


- RecyclerView를 Swipe, Drag, Touch하기

- 일단 어댑터 안에 데이터를 조작하는 메소드를 넣자
	- dataSet은 데이터 담고 있는 변수 이름임

```

class RecyclerViewAdapter: RecyclerView.Adapter<RecyclerViewAdapter.ViewHolder>() {

    // ViewHolder 포지션을 받아 그 위치의 데이터를 삭제하고 notifyItemRemoved로 어댑터에 갱신명령을 전달
    fun removeData(position: Int) {
        dataSet.removeAt(position)
        notifyItemRemoved(position)
    }

    // 두 개의 ViewHolder 포지션을 받아 Collections.swap으로 첫번째 위치와 두번째 위치의 데이터를 교환
    fun swapData(fromPos: Int, toPos: Int) {
        Collections.swap(dataSet, fromPos, toPos)
        notifyItemMoved(fromPos, toPos)
    }

    // 선택한 ViewHolder 포지션의 데이터 내용을 바꾸도록 함
    fun setData(position: Int) {
        dataSet[position] = listOf("main viewholder touched!", "sub viewholder touched!")
        notifyItemChanged(position)
    }
}


```

- 안드로이드엔 Recyclerview에 입력되는 스와이프와 드래그 동작을 감지하는 ItemTouchHelper.SimpleCallback 클래스가 있다

```

val itemTouchCallback = object : ItemTouchHelper.SimpleCallback (
    ItemTouchHelper.UP or ItemTouchHelper.DOWN, ItemTouchHelper.LEFT // 움직이도록 허락한 방향
        ){
    // 납치했을 때 할 일
    override fun onMove(
        recyclerView: RecyclerView,
        viewHolder: RecyclerView.ViewHolder,
        target: RecyclerView.ViewHolder
    ): Boolean {
        //이동의 시작점
        val fromPos: Int = viewHolder.adapterPosition
        //이동의 끝점
        val toPos: Int = target.adapterPosition
        rvAdapter.swapData(fromPos, toPos)
        return true
    }

    // 상하좌우로 움직였을 때 할일
    override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {
        //레이아웃포지션은 고정된 위치의 포지션
        rvAdapter.removeData(viewHolder.layoutPosition)
    }
}

ItemTouchHelper(itemTouchCallback).attachToRecyclerView(binding.recyclerView)

```

- UX를 높이기 위해 스와이프 하는 동안 휴지통 모양과 빨간 배경 나타나게 하기
	- 아이템 콜백에 onChildDraw를 오버라이드 하자

```

override fun onChildDraw(
    c: Canvas,
    recyclerView: RecyclerView,
    viewHolder: RecyclerView.ViewHolder,
    dX: Float,
    dY: Float,
    actionState: Int,
    isCurrentlyActive: Boolean
) {
    val icon: Bitmap
    // actionState가 SWIPE 동작일 때 배경을 빨간색으로 칠하는 작업을 수행하도록 함
    if (actionState == ItemTouchHelper.ACTION_STATE_SWIPE) {
        val itemView = viewHolder.itemView
        val height = (itemView.bottom - itemView.top).toFloat()
        val width = height / 4
        val paint = Paint()
        if (dX < 0) {  // 왼쪽으로 스와이프하는지 확인
            // ViewHolder의 백그라운드에 깔아줄 사각형의 크기와 색상을 지정
            paint.color = Color.parseColor("#ff0000")
            val background = RectF(itemView.right.toFloat() + dX, itemView.top.toFloat(), itemView.right.toFloat(), itemView.bottom.toFloat())
            c.drawRect(background, paint)

            // 휴지통 아이콘과 표시될 위치를 지정하고 비트맵을 그려줌
            // 비트맵 이미지는 Image Asset 기능으로 추가하고 drawable 폴더에 위치하도록 함
            icon = BitmapFactory.decodeResource(resources, R.drawable.ic_menu_delete)
            val iconDst = RectF(itemView.right.toFloat() - 3  - width, itemView.top.toFloat() + width, itemView.right.toFloat() - width, itemView.bottom.toFloat() - width)
            c.drawBitmap(icon, null, iconDst, null)
        }
    }

    super.onChildDraw(
        c,
        recyclerView,
        viewHolder,
        dX,
        dY,
        actionState,
        isCurrentlyActive
    )
}

```

- 터치시 애니메이션 추가
	- 어떤 뷰홀더를 터치해는지 잘 모르겠으니까 애니메이션을 추가해보자
	- item에 android:background="?attr/selectableItemBackground" 속성을 넣어주자



################################################################################################
